///* python.exe pyEmbInTxt.py ex2\example_latex.texpy
This is COMMENT.
*///
\documentclass[pdflatex, a4paper, 10pt, jadriver=standard]{bxjsarticle}///This is LINE_COMMENT.
\setlength{\topmargin}{-20mm}
\setlength{\oddsidemargin}{0pt}

\begin{document}
		
	\begin{enumerate} 
		\item[] \hspace{-8mm}{\Large \bf ~~~example\_LaTeX}\\
		
		\item {\bf Trigonometric Table}\vspace{2mm}

\pycode{
import math
print('\\begin{tabular}{|c|c|c|c|}\\hline')
print('$x^\\circ$ & $\\sin x$ & $\\cos x$ & $\\tan x$\\\\ \\hline')
start, end ,step= 0.0, 90.0, 5.0
deg = start
while True:
	rad = deg * math.pi /180
	if deg > 89.999:
		print('${:2.1f}^\\circ$&${:8.7f}$&${:8.7f}$& undefined \\\\ \\hline'.format(deg, math.sin(rad), math.cos(rad)))
	else:
		if math.tan(rad) < 10:
			print('${:2.1f}^\\circ$&${:8.7f}$&${:8.7f}$&${:8.7f}$\\\\ \\hline'.format(deg, math.sin(rad), math.cos(rad), math.tan(rad)))
		else:
			print('${:2.1f}^\\circ$&${:8.7f}$&${:8.7f}$&${:7.2e}$\\\\ \\hline'.format(deg, math.sin(rad), math.cos(rad), math.tan(rad)))
	deg += step
	if deg > 90.000:
		break   
print('\\end{tabular}')
/code}\vspace{5mm}

		\item {\bf Derivative and Integral Table }\vspace{2mm}
		
\pycode{
from sympy import *
x = symbols('x')
print('\\begin{tabular}{|l|l|}\\hline')
print('Derivative&Integral \\\\ \\hline')
func_list = [x**2*sin(x), x**2*exp(x), x**2*log(x)]
for func in func_list:
	d_str = '\\displaystyle '+latex(Derivative(func, x))+'='+latex(Derivative(func, x).doit())
	i_str = '\\displaystyle '+latex(Integral(func, x))+'='+latex(Integral(func, x).doit())+'+C'
	print('\\rule[-4mm]{0pt}{10mm}',end='')
	print('${:s}$&${:s}$\\\\ \\hline'.format(d_str, i_str))
print('\\end{tabular}')
/code}\vspace{5mm}

	\item antlr4はLL構文解析に基づくparser generatorである\\
		\pyprn{'antlr4はLL構文解析に基づくparser generatorである'/prn} \vspace{5mm}
		
	\item 
\pycode{
num = 10
print('\'日本語 \'を',num,'回表示します\\\\ \\vspace{3mm} ')
for i in range(num):
	print('日本語~',end='')
/code} 		
		 
	\end{enumerate}
     
\end{document}
